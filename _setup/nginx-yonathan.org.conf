# This is an nginx config, which will be included within the http context by the default nginx.conf
# when it is placed in /etc/nginx/sites-enabled/ (which is typically a set of links to /etc/nginx/sites-available/)

# Create NS and SOA records with google:
# gcloud dns managed-zones create --dns-name="yonathan.org." --description="Yonathan.org" "yonathan"
# Click Registrar Setup to find correct NS server records to put in namecheap
# gcloud dns record-sets transaction start --zone=yonathan
# gcloud dns record-sets transaction add --zone=yonathan --name blog.yonathan.org. --ttl 300 --type A 104.198.15.122
# gcloud dns record-sets transaction add --zone=yonathan --name yonathan.org. --ttl 300 --type A 104.198.15.122
# gcloud dns record-sets transaction add --zone=yonathan --name www.yonathan.org. --ttl 300 --type A 104.198.15.122
# gcloud dns record-sets transaction execute --zone=yonathan
# (equivalent to specifying yaml):
# ---
# additions:
# - kind: dns#resourceRecordSet
#   name: yonathan.org.
#   rrdatas:
#   - 104.198.15.122
#   ttl: 300
#   type: A
# - kind: dns#resourceRecordSet
#   name: www.yonathan.org.
#   rrdatas:
#   - 104.198.15.122
#   ttl: 300
#   type: A
# deletions: []

# redirect all HTTP to HTTPS; see https://serverfault.com/a/337893/331760
# I no longer do this here; I put it in http.conf along with a letsencrypt redirect
#server {
#    listen         80 default_server;
#    listen         [::]:80 default_server;
#    return         301 https://$host$request_uri;
#}



# keys_zone gives in-memory size of keys
# max_size is size of data on disk
proxy_cache_path /var/www/cache levels=1:2 keys_zone=my_cache:10m max_size=10g
                 inactive=2h use_temp_path=off;

server {
    listen         443 ssl;
    listen         [::]:443 ssl;
    server_name    blog.yonathan.org;

    # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    add_header Strict-Transport-Security "max-age=31536000";
    
    # TLS certificate chain; the result of cat the most specific to the most authoritative certificates together
    ssl_certificate /etc/nginx/tls/yonathan.org.crtchain;
    ssl_certificate_key /etc/nginx/tls/yonathan.org.key;
    ssl_session_cache shared:SSL:10m;

    #root /var/www/html;

    proxy_cache_key "$uri"; # Ignore Parameters
    if ( $request_method !~ "GET|HEAD|PURGE" ) {
        return 405;
    }

    charset utf-8;


    # For some reason, this is the only way to really clear cache (deleting the files and restarting isn't enough)!
    # http://stackoverflow.com/questions/6236078/how-to-clear-the-cache-of-nginx
    sendfile off;

    location / {

        index index.html;
        # gsutil defacl set public-read  gs://yonathan
        
        # disable ipv6 since GCE doesn't support it; see https://serverfault.com/a/796912/331760
        # otherwise, nginx will give error connect() to [...]:443 failed (101: Network is unreachable) while connecting to upstream
        resolver 169.254.169.254 ipv6=off;
        #proxy_pass http://localhost:8080/yonathan$uri;
        proxy_pass https://storage.googleapis.com/yonathan/;
        proxy_cache my_cache;
        # Hide/ignore unnecessary heaers
        # based on https://gist.github.com/touhonoob/5364f6c9099609c826a4
        proxy_hide_header   x-goog-hash;
        proxy_hide_header   x-goog-generation;
        proxy_hide_header   x-goog-metageneration;
        proxy_hide_header   x-goog-stored-content-encoding;
        proxy_hide_header   x-goog-stored-content-length;
        proxy_hide_header   x-goog-storage-class;
        proxy_hide_header   x-xss-protection;
        proxy_hide_header   accept-ranges;
        proxy_hide_header   alternate-protocol;
        proxy_hide_header   Set-Cookie;
        proxy_hide_header   X-GUploader-UploadID;
        proxy_ignore_headers   "Set-Cookie";
        proxy_set_header    Host storage.googleapis.com;
        proxy_set_header    Connection "";
        #proxy_intercept_errors on;  # serve nginx's own errors instead of Google Cloud Storage's
        
        # If server is temporarily down, serve stale data even if it is older than expiry
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
    }
    location = / {
        rewrite "/" /index.html;
    }
    location @unused {
        # First attempt to serve request as file, then
        # as directory.
        #try_files $uri $uri/ @proxy;
        #try_files $uri $uri/index.html @proxy;
    }
}

# Virtual servers using SNI: listen to multiple TLS hosts and redirect to blog
# see http://nginx.org/en/docs/http/configuring_https_servers.html
server {
    # If server_name is different than any specified, then this default_server will match
    listen         443 ssl default_server;
    listen         [::]:443 ssl default_server;
    server_name    yonathan.org www.yonathan.org;

    ssl_certificate /etc/nginx/tls/yonathan.org.crtchain;
    ssl_certificate_key /etc/nginx/tls/yonathan.org.key;
    return         301 https://blog.yonathan.org/;
}
